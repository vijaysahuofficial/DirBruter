#!/usr/bin/env python3

"""
MIT License

Copyright (c) 2022 Vijay Sahu

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""
import sys
import time
import queue
import os.path
import random
import argparse
import requests
import threading
from resources.banner import banner
from resources.useragents import user_agents
from resources.colors import red, white, green, blue, yellow, reset

print(banner)


def main(args):
    extensions = []
    if args.extensions:
        x = args.extensions.split(',')
        for i in x:
            extensions.append(i.strip())
    else:
        pass
    for i in range(args.threads):
        t = threading.Thread(target=dirBruter, args=(args, extensions))
        t.daemon = True
        t.start()
        while True:
            t.join(1)
            if not t.is_alive():
                break
            time.sleep(2)


def valid_wordlist(parser, args):
    if not os.path.exists(args):
        print(f"{white}[{red}WARNING{white}] The file {green}{args}{white} does not exist{reset}")
    else:
        print(f"{white}> Wordlist: {green}{args}{reset}")
        wordlist_file = open(args, 'r')
        return wordlist_file


def save_found_results(target_url):
    ts = time.localtime()
    timestamp = time.strftime("%H:%M:%S", ts)
    file = open(f'dB_output.txt', 'a')
    file.write(f'[{timestamp}] : {target_url}\n')


def dirBruter(args, extensions=None):
    raw_url = args.url
    last_char = raw_url[-1]
    if last_char == '/':
        url = raw_url[:-1]
    else:
        url = raw_url
    wordlist = args.wordlist
    words = queue.Queue()
    for word in wordlist:
        word = word.rstrip()
        words.put(word)
    found_url = []
    while not words.empty():
        attempt = words.get()
        attempt_list = []
        if "." not in attempt:
            attempt_list.append(f"/{attempt}/")
        else:
            attempt_list.append(f"/{attempt}")
        if extensions:
            for extension in extensions:
                attempt_list.append(f"/{attempt}{extension}")
        for brute in attempt_list:
            try:

                target_url = f"{url}{brute}"
                headers = {"User-Agent": f"{random.choice(user_agents)}"}
                response = requests.get(target_url, headers=headers, timeout=5)
                if response.status_code == 200:
                    if args.output:
                        save_found_results(target_url)
                    found_url.append(target_url)
                    print(f"{white}[{green}FOUND{white}] {response.status_code}: {green}{target_url}{reset}")

                elif response.status_code == 404:
                    if args.verbose:
                        print(f"{white}[{red}NOT FOUND{white}] {response.status_code}: {red}{target_url}{reset}")
                    else:
                        pass
                else:
                    if args.verbose:
                        print(f"{white}[{blue}UNKNOWN{white}] {response.status_code}: {blue}{target_url}{reset}")
                    else:
                        pass

            except requests.Timeout:
                if args.verbose:
                    print(f"{white}[{yellow}TIMEOUT{white}] Request timed out: {yellow}{target_url}{reset}")

            except Exception as e:
                if args.verbose:
                    print(f"{white}[{red}ERROR{white}] An error occurred: {red}{e}{reset}")


parser = argparse.ArgumentParser(
    description=f'{white}DirBruter â€” by Vijay Sahu | {green}https://github.com/vijaysahuofficial{reset}',
    epilog=f'{white}DirBruter is a Python based CLI tool that looks for hidden or existing directories/files using brute force method. It basically works by launching a dictionary based attack against a webserver and analyze its response.{reset}')
parser.add_argument('-t', '--threads', type=int, help='number of threads (default is 1)', metavar='<threads>',
                    default=1)
parser.add_argument('-u', '--url', type=str, help='target url', metavar='<url>', required=True)
parser.add_argument('-w', '--wordlist', help="wordlist file/path to wordlist", metavar='<wordlist>', required=True,
                    type=lambda x: valid_wordlist(parser, x))
parser.add_argument('-o', '--output', help='save found results to a file', action='store_true')
parser.add_argument('-v', '--verbose', help='verbose output (show network logs/errors)', action='store_true')
parser.add_argument('-e', '--extensions', help='extensions (example ".php,.exe,.bak")', metavar='<extensions>')
args = parser.parse_args()
if __name__ == '__main__':
    try:
        print(f"{white}> Target: {green}{args.url}{reset}")
        print(f"{white}-{reset}" * 41)
        main(args)
    except KeyboardInterrupt:
        if args.verbose:
            print(f"{white}[{red}CTRLC{white}] Exiting...{reset}")
            time.sleep(1)
            sys.exit(1)
        sys.exit(1)

    except Exception as e:
        if args.verbose:
            print(f"{white}[{red}ERROR{white}] An error occurred: {red}{e}{reset}")
